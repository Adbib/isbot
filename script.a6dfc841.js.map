{"version":3,"sources":["src/index.js","src/amend/index.js","src/isbot/index.js","../src/amend/index.js","../src/list.json","script.js"],"names":["amend","list","RegExp","test","error","forEach","search","replace","index","lastIndexOf","splice","flags","Isbot","patterns","slice","Object","defineProperties","ua","entries","getOwnPropertyDescriptors","prototype","reduce","accumulator","prop","descriptor","value","assign","bind","get","Boolean","match","filter","entry","exclude","matches","filters","push","apply","rule","map","toLowerCase","length","join","indexOf","isbot","module","exports","timer","change","target","clearTimeout","setTimeout","check","append","parent","tag","string","ele","document","createElement","appendChild","createTextNode","details","fragment","createDocumentFragment","is","found","find","pattern","textarea","innerHTML","trim","output","firstChild","removeChild","className","querySelector","query","window","location","childNodes","child","parentNode","decodeURIComponent","navigator","userAgent","addEventListener","select"],"mappings":"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","file":"script.a6dfc841.js","sourceRoot":"../page","sourcesContent":["import { Isbot } from './isbot/index.js'\n\nconst isbot = new Isbot()\n\nexport default isbot\n","/**\n * Mutate given list of patter strings\n * @param {string[]} list\n * @returns {string[]}\n */\nexport function amend (list) {\n  try {\n    // Risk: Uses lookbehind assertion, avoid breakage in parsing by using RegExp constructor\n    new RegExp('(?<! cu)bot').test('dangerbot') // eslint-disable-line prefer-regex-literals\n  } catch (error) {\n    // Skip regex fixes\n    return list\n  }\n\n  [\n    // Addresses: Cubot device\n    ['bot', '(?<! cu)bot'],\n    // Addresses: Android webview\n    ['google', '(?<! (?:channel/|google/))google(?!(app|/google| pixel))'],\n    // Addresses: libhttp browser\n    ['http', '(?<!(?:lib))http'],\n    // Addresses: java based browsers\n    ['java', 'java(?!;)'],\n    // Addresses: Yandex Search App\n    ['search', '(?<! ya(?:yandex)?)search']\n  ].forEach(\n    ([search, replace]) => {\n      const index = list.lastIndexOf(search)\n      if (~index) {\n        list.splice(index, 1, replace)\n      }\n    }\n  )\n\n  return list\n}\n","import list from '../list.json' assert { type: 'json' }\nimport { amend } from '../amend/index.js'\n\namend(list)\n\nconst flags = 'i'\n\n/**\n * Test user agents for matching patterns\n */\nexport class Isbot {\n  /**\n   * @type {string[]}\n   */\n  #list\n\n  /**\n   * @type {RegExp}\n   */\n  #pattern\n\n  constructor (patterns) {\n    this.#list = patterns || list.slice()\n    this.#update()\n\n    const isbot = ua => this.test(ua)\n\n    return Object.defineProperties(\n      isbot,\n      Object.entries(Object.getOwnPropertyDescriptors(Isbot.prototype)).reduce(\n        (accumulator, [prop, descriptor]) => {\n          if (typeof descriptor.value === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { value: this[prop].bind(this) } }\n            )\n          }\n          if (typeof descriptor.get === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { get: () => this[prop] } }\n            )\n          }\n          return accumulator\n        },\n        {}\n      )\n    )\n  }\n\n  /**\n   * Recreate the pattern from rules list\n   */\n  #update () {\n    this.#pattern = new RegExp(\n      this.#list.join('|'),\n      flags\n    )\n  }\n\n  /**\n   * Find the first index of an existing rule or -1 if not found\n   * @param  {string} rule\n   * @returns {number}\n   */\n  #index (rule) {\n    return this.#list.indexOf(rule.toLowerCase())\n  }\n\n  /**\n   * Get a clone of the pattern\n   * @type RegExp\n   */\n  get pattern () {\n    return new RegExp(this.#pattern)\n  }\n\n  /**\n   * Match given string against out pattern\n   * @param  {string} ua User Agent string\n   * @returns {boolean}\n   */\n  test (ua) {\n    return Boolean(ua) && this.#pattern.test(ua)\n  }\n\n  /**\n   * Get the match for strings' known crawler pattern\n   * @param  {string} ua User Agent string\n   * @returns {string|null}\n   */\n  find (ua = '') {\n    const match = ua.match(this.#pattern)\n    return match && match[0]\n  }\n\n  /**\n   * Get the patterns that match user agent string if any\n   * @param  {string} ua User Agent string\n   * @returns {string[]}\n   */\n  matches (ua = '') {\n    return this.#list.filter(\n      entry => new RegExp(entry, flags).test(ua)\n    )\n  }\n\n  /**\n   * Clear all patterns that match user agent\n   * @param  {string} ua User Agent string\n   * @returns {void}\n   */\n  clear (ua = '') {\n    this.exclude(this.matches(ua))\n  }\n\n  /**\n   * Extent patterns for known crawlers\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  extend (filters = []) {\n    [].push.apply(\n      this.#list,\n      filters.filter(\n        rule => this.#index(rule) === -1\n      ).map(\n        filter => filter.toLowerCase()\n      )\n    )\n    this.#update()\n  }\n\n  /**\n   * Exclude patterns from bot pattern rule\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  exclude (filters = []) {\n    let { length } = filters\n    while (length--) {\n      const index = this.#index(filters[length])\n      if (index > -1) {\n        this.#list.splice(index, 1)\n      }\n    }\n    this.#update()\n  }\n\n  /**\n   * Create a new Isbot instance using given list or self's list\n   * @param  {string[]} [list]\n   * @returns {Isbot}\n   */\n  spawn (list) {\n    return new Isbot(list || this.#list)\n  }\n}\n","/**\n * Mutate given list of patter strings\n * @param {string[]} list\n * @returns {string[]}\n */\nexport function amend (list) {\n  try {\n    // Risk: Uses lookbehind assertion, avoid breakage in parsing by using RegExp constructor\n    new RegExp('(?<! cu)bot').test('dangerbot') // eslint-disable-line prefer-regex-literals\n  } catch (error) {\n    // Skip regex fixes\n    return list\n  }\n\n  [\n    // Addresses: Cubot device\n    ['bot', '(?<! cu)bot'],\n    // Addresses: Android webview\n    ['google', '(?<! (?:channel/|google/))google(?!(app|/google| pixel))'],\n    // Addresses: libhttp browser\n    ['http', '(?<!(?:lib))http'],\n    // Addresses: java based browsers\n    ['java', 'java(?!;)'],\n    // Addresses: Yandex Search App\n    ['search', '(?<! ya(?:yandex)?)search']\n  ].forEach(\n    ([search, replace]) => {\n      const index = list.lastIndexOf(search)\n      if (~index) {\n        list.splice(index, 1, replace)\n      }\n    }\n  )\n\n  return list\n}\n","module.exports=[\" daum[ /]\",\" DCV$\",\" deusu/\",\"(?:^| )site\",\"@[a-z]\",\"\\\\(at\\\\)[a-z]\",\"\\\\(github\\\\.com/\",\"\\\\[at\\\\][a-z]\",\"^12345\",\"^<\",\"^[\\\\w \\\\.]+/v?\\\\d+(\\\\.\\\\d+)?(\\\\.\\\\d{1,10})?$\",\"^[\\\\w\\\\-\\\\(\\\\)]+$\",\"^[^ ]{50,}$\",\"^ace explorer\",\"^acoon\",\"^active\",\"^ad muncher\",\"^anglesharp/\",\"^anonymous\",\"^apple-pubsub/\",\"^astute srm\",\"^avsdevicesdk/\",\"^axios/\",\"^bidtellect/\",\"^biglotron\",\"^blackboard safeassign\",\"^blocknote.net\",\"^braze sender\",\"^captivenetworksupport\",\"^castro\",\"^cf-uc \",\"^clamav[ /]\",\"^cobweb/\",\"^coccoc\",\"^custom\",\"^dap \",\"^ddg[_-]android\",\"^discourse\",\"^dispatch/\\\\d\",\"^downcast/\",\"^duckduckgo\",\"^email\",\"^enigma browser\",\"^evernote clip resolver\",\"^facebook\",\"^faraday\",\"^fdm[ /]\\\\d\",\"^getright/\",\"^gozilla/\",\"^hatena\",\"^hobbit\",\"^hotzonu\",\"^hwcdn/\",\"^invision\",\"^jeode/\",\"^jetbrains\",\"^jetty/\",\"^jigsaw\",\"^linkdex\",\"^lwp[-: ]\",\"^mailchimp\\\\.com$\",\"^metauri\",\"^microsoft bits\",\"^microsoft data\",\"^microsoft office existence\",\"^microsoft office protocol discovery\",\"^microsoft windows network diagnostics\",\"^microsoft-cryptoapi\",\"^microsoft-webdav-miniredir\",\"^movabletype\",\"^mozilla/\\\\d\\\\.\\\\d \\\\(compatible;?\\\\)$\",\"^mozilla/\\\\d\\\\.\\\\d \\\\w*$\",\"^my browser$\",\"^navermailapp\",\"^netsurf\",\"^nginx\\\\W\",\"^node-superagent\",\"^octopus\",\"^offline explorer\",\"^pagething\",\"^panscient\",\"^perimeterx\",\"^php\",\"^postman\",\"^postrank\",\"^python\",\"^read\",\"^reed\",\"^restsharp/\",\"^shareaza\",\"^shockwave flash\",\"^snapchat\",\"^space bison\",\"^sprinklr\",\"^svn\",\"^swcd \",\"^t-online browser\",\"^taringa\",\"^test certificate info\",\"^the knowledge ai\",\"^thinklab\",\"^thumbor/\",\"^traackr.com\",\"^tumblr/\",\"^uptime\",\"^vbulletin\",\"^venus/fedoraplanet\",\"^w3c\",\"^webbandit/\",\"^webcopier\",\"^wget\",\"^whatsapp\",\"^www-mechanize\",\"^xenu link sleuth\",\"^yahoo\",\"^yandex\",\"^zdm/\\\\d\",\"^zeushdthree\",\"^zoom marketplace/\",\"^{{.*}}$\",\"adbeat\\\\.com\",\"appinsights\",\"archive\",\"ask jeeves/teoma\",\"bit\\\\.ly/\",\"bluecoat drtr\",\"bot\",\"browsex\",\"burpcollaborator\",\"capture\",\"catch\",\"check\",\"chrome-lighthouse\",\"chromeframe\",\"client\",\"cloud\",\"crawl\",\"daemon\",\"dareboost\",\"datanyze\",\"dataprovider\",\"dejaclick\",\"dmbrowser\",\"download\",\"evc-batch/\",\"feed\",\"firephp\",\"freesafeip\",\"ghost\",\"gomezagent\",\"google\",\"headlesschrome/\",\"http\",\"httrack\",\"hubspot marketing grader\",\"hydra\",\"ibisbrowser\",\"images\",\"iplabel\",\"ips-agent\",\"java\",\"library\",\"mail\\\\.ru/\",\"manager\",\"monitor\",\"morningscore/\",\"neustar wpm\",\"news\",\"nutch\",\"offbyone\",\"optimize\",\"pageburst\",\"pagespeed\",\"parse\",\"perl\",\"phantom\",\"pingdom\",\"powermarks\",\"preview\",\"probe\",\"proxy\",\"ptst[ /]\\\\d\",\"reader\",\"rexx;\",\"rigor\",\"rss\",\"scan\",\"scrape\",\"search\",\"serp ?reputation ?management\",\"server\",\"sogou\",\"sparkler/\",\"spider\",\"statuscake\",\"stumbleupon\\\\.com\",\"supercleaner\",\"synapse\",\"synthetic\",\"taginspector/\",\"toolbar\",\"torrent\",\"tracemyfile\",\"transcoder\",\"trendsmapresolver\",\"twingly recon\",\"url\",\"valid\",\"virtuoso\",\"wappalyzer\",\"webglance\",\"webkit2png\",\"websitemetadataretriever\",\"whatcms/\",\"wordpress\",\"zgrab\"];","import isbot from '..'\nimport { amend } from '../src/amend/index.js'\nimport list from '../src/list.json'\n\n{\n  const textarea = document.querySelector('textarea')\n  const output = document.querySelector('output')\n  let timer\n\n  const query = window.location.search.replace(/\\?ua=(.*)$/, '$1')\n\n  amend(list)\n\n  textarea.childNodes.forEach(child => child.parentNode?.removeChild(child))\n  textarea.appendChild(document.createTextNode(\n    query\n      ? decodeURIComponent(query)\n      : navigator.userAgent\n  )\n  )\n  textarea.addEventListener('keyup', change)\n  textarea.addEventListener('paste', change)\n  textarea.addEventListener('focus', () => textarea.select())\n  check()\n\n  function change ({ target: { value } }) {\n    clearTimeout(timer)\n    timer = setTimeout(check, 200, value)\n  }\n\n  function append (parent, tag, string) {\n    if (tag) {\n      const ele = document.createElement('kbd')\n      ele.appendChild(document.createTextNode(string))\n      parent.appendChild(ele)\n    } else {\n      parent.appendChild(document.createTextNode(string))\n    }\n  }\n\n  function details (ua) {\n    const fragment = document.createDocumentFragment()\n    const is = isbot(ua)\n    const found = is && isbot.find(ua)\n    const pattern = found\n      ? isbot.matches(ua)?.find(pattern => new RegExp(pattern, 'i').test(found))\n      : null\n\n    is\n      ? append(fragment, null, 'I think so, yes\\n')\n      : append(fragment, null, 'I don\\'t think so, no\\nI could not find a pattern I recognise')\n    found && append(fragment, null, 'The substring ')\n    found && append(fragment, 'kbd', found)\n    pattern && append(fragment, null, ' matches the pattern ')\n    pattern && append(fragment, 'kbd', pattern)\n    return fragment\n  }\n\n  function check (value = textarea.innerHTML) {\n    value = value.trim()\n    while (output.firstChild) {\n      output.removeChild(output.firstChild)\n    }\n    if (value === '') {\n      output.appendChild(\n        document.createTextNode(\n          'Insert user agent string in the text box'\n        )\n      )\n      return\n    }\n\n    output.appendChild(details(value))\n\n    output.className = ''\n    setTimeout(() => { output.className = 'highlight' }, 100)\n  }\n}\n"]}